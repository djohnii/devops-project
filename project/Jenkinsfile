pipeline {
    agent {
        label "agent-1"
    } 
    environment {
        registry = "alwx1753/devops-project"
        registryCredential = 'dockerhub'
        dockerImage = ''
        taglatest = sh(script: 'git describe $(git rev-parse @) --tags --abbrev=0', returnStdout: true).trim()
        penultimate = sh(script: 'git describe $(git rev-parse @~~) --tags --abbrev=0', returnStdout: true).trim()
    }
    stages {
        stage('build docker image'){
            steps{
                script{
                    if  (env.taglatest != env.penultimate) {
                        dir('project/docker'){
                            dockerImage = docker.build registry + ":${taglatest}"
                        }
                        echo "не совпадают т.е. версия "
                    }
                    else {
                        echo "Совпадают те версия latest"
                        dir('project/docker'){
                            dockerImage = docker.build registry + ":latest"
                        }
                    }
                    

                }
            }
        }
        stage('deploy image') {
            steps{
                script{
                    def latest_docker_image = sh(script: 'docker images --format "{{.Repository}}:{{.Tag}}" --no-trunc | head -n 1', returnStdout: true).trim()
                    if  (env.taglatest != env.penultimate) {
                        sh "sed -i 's|image:.*|image: ${latest_docker_image}|' project/k8s/myapp/myapp.yml"
                        // sh "sed -i 's|image:.*|image: ${dockerImage}:${taglatest}|' project/k8s/myapp/myapp.yml"
                        docker.withRegistry( '', registryCredential ) {
                            dockerImage.push("${gitTag}")
                        }
                    }
                    else {
                        sh "sed -i 's|image:.*|image: ${latest_docker_image}|' project/k8s/myapp/myapp.yml"                       
                        // sh "sed -i 's|image:.*|image: ${dockerImage}:latest|' project/k8s/myapp/myapp.yml"
                        docker.withRegistry( '', registryCredential ) {
                            dockerImage.push("latest")
                        }
                    }
                }
            }
        }

        stage('deploy to k8s'){
            steps{
                script{
                    dir('project/k8s/myapp'){
                        sh "cat ./myapp.yml"
                        // kubeconfig(credentialsId: 'TokenForKuber', serverUrl: 'https://158.160.38.130') {
                            // sh "sed -i 's|image:.*|image: ${dockerImage}:${taglatest}|' project/k8s/myapp.yml"
                        sh 'kubectl get pod -n jenkins'
                        sh 'kubectl apply -f ./'
                        // }

                    }

                }
            }
        }
    }
}
