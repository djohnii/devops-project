node {
    git url: 'https://github.com/jenkinsci/git-tag-message-plugin'
    env.GIT_TAG_NAME = gitTagName()
    env.GIT_TAG_MESSAGE = gitTagMessage()
}

/** @return The tag name, or `null` if the current commit isn't a tag. */
String gitTagName() {
    commit = getCommit()
    if (commit) {
        desc = sh(script: "git describe --tags ${commit}", returnStdout: true)?.trim()
        if (isTag(desc)) {
            return desc
        }
    }
    return null
}

/** @return The tag message, or `null` if the current commit isn't a tag. */
String gitTagMessage() {
    name = gitTagName()
    msg = sh(script: "git tag -n10000 -l ${name}", returnStdout: true)?.trim()
    if (msg) {
        return msg.substring(name.size()+1, msg.size())
    }
    return null
}

String getCommit() {
    return sh(script: 'git rev-parse HEAD', returnStdout: true)?.trim()
}

@NonCPS
boolean isTag(String desc) {
    match = desc =~ /.+-[0-9]+-g[0-9A-Fa-f]{6,}$/
    result = !match
    match = null // prevent serialisation
    return result
}



pipeline {
    agent {
        label "agent-1"
    } 
    stages {
        stage('Build') {
            steps {
                echo "${name}"
            }
        }


    }
}
                    
                    // sh "mkdir -p git_branch"
                    // dir('git_branch'){
                    //     git branch: 'main', credentialsId: '2009ea58-5299-4880-ac2d-d125a1281116', url: 'https://github.com/djohnii/devops-project.git'
                    //     TAG = sh (
                    //         returnStdout: true,
                    //         script: 'git fetch --tags && git tag --points-at HEAD | awk NF'
                    //         ).trim()
                    //     echo "${TAG}"


                        // checkout scm
                        // def gitTag = sh(script: 'git describe --tags --exact-match 2>/dev/null', returnStatus: true)
                        // if (gitTag == 0) {
                        //     env.GIT_TAG = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                        // } else {
                        //     env.GIT_TAG = "No tag found"
                        // }
                        // echo "Current tag: ${env.GIT_TAG}"




                        // env.GIT_TAG = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                        // env.GIT_TAG_MESSAGE = sh(script: "git tag -n10000 -l ${env.GIT_TAG}", returnStdout: true).trim()
                        // def gitTag = sh(script: 'git describe --tags --exact-match 2>/dev/null', returnStatus: true)
                        // if (gitTag == 0) {
                        //     env.GIT_TAG = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                        // } else {
                        //     env.GIT_TAG = "No tag found"
                        // }
                        // echo "Current tag: ${env.GIT_TAG}"
                        // git branch: 'main', credentialsId: '2009ea58-5299-4880-ac2d-d125a1281116', url: 'https://github.com/djohnii/devops-project.git'
                        // sh 'git fetch'
                        // gitTag=sh(returnStdout:  true, script: "git tag --sort=-creatordate | head -n 1").trim()
                        // echo "gitTag output: ${gitTag}"
                    // }
        // stage('test build tag') {
        //     // when {
        //     //      tag "release-*"
        //     // }
        //     steps{
        //         script{
        //             echo "test tag work12"
        //             docker.withRegistry( '', registryCredential ) {
        //                 dockerImage.push("${gitTag}")
        //             }
        //         }
        //     }
        // }
        // stage('deploy to k8s'){
        //     steps{
        //         script{
        //             echo "deploy to k8s"
        //             dir('project/k8s'){
        //                 kubeconfig(credentialsId: 'TokenForKuber', serverUrl: 'https://158.160.38.130') {
        //                     sh 'kubectl apply -f myapp.yml ingress.yml -n jenkins'
        //                 }
        //             }
        //         }
        //     }
        // }


